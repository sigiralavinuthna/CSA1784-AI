def is_safe(board, row, col):
    for prev_row in range(row):
        if board[prev_row] == col or \
           board[prev_row] - prev_row == col - row or \
           board[prev_row] + prev_row == col + row:
            return False
    return True

def solve_queens(board, row):
    n = len(board)
    if row >= n:
        return True
    
    for col in range(n):
        if is_safe(board, row, col):
            board[row] = col
            if solve_queens(board, row + 1):
                return True
            board[row] = -1
    
    return False

def print_solution(board):
    n = len(board)
    for row in range(n):
        line = ""
        for col in range(n):
            if board[row] == col:
                line += "Q "
            else:
                line += ". "
        print(line)
    
def solve_n_queens(n):
    board = [-1] * n
    if not solve_queens(board, 0):
        print("No solution exists.")
    else:
        print_solution(board)
n=8
solve_n_queens(n)
